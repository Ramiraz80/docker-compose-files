# docker-compose file for a service (example)
# using 2 spaces as indent.

# docker-compose file reference: https://docs.docker.com/compose/compose-file/compose-file-v3/
---
version: "3.8" # defines that this compose file uses docker-compose file format version 3.8

# Internal docker networks used by the services in this compose-file. This is the "top level networks key". Read more about networking in docker-compose here: https://docs.docker.com/compose/networking/.
# This defaults to bridge networking, but can also be in overlay mode.
networks:
  - first-network
    - external: false # this defines if this is an internal docker network, or an external network.
  - second-network
    - external: true # this defines if this is an internal docker network, or an external network.

# define service running here
services:
  service-name: # the name of the service we are deploying (ie: ovpn, plex, or something else)
    # for instance linuxserver/plex:latest or zabbix/zabbix-server-mysql:5.0-ubuntu-latest
    image: provider/image:version

    # Name of the container
    container_name: name

    # network_mode can be "host", "bridge", "overlay", "ipvlan", "macvlan", "none" read more here: https://docs.docker.com/network/
    network_mode: bridge

    # Defines configuration files for the service in short form. USE EITHER SHORT OR LONG. NOT BOTH!
    configs:
      - config-file-name-short-form # this will be mounted at /<config_name> inside the container.

    ## Defines configuration files for the service in long form. USE EITHER SHORT OR LONG. NOT BOTH!
    configs:
      - source: config-file-name-long-form # The identifier of the config as it is defined in this configuration
        target: /config-name-inside-container # The path and name of the file to be mounted in the service’s task containers. Defaults to /<source> if not specified.
        uid: '1000' # The numeric UID that owns the mounted config file within in the service’s task containers. Defaults to 0 on Linux if not specified. Not supported on Windows.
        gid: '1000' # The numeric GID that owns the mounted config file within in the service’s task containers. Defaults to 0 on Linux if not specified. Not supported on Windows.
        mode: 0440 # The permissions for the file that is mounted within the service’s task containers, in octal notation. For instance, 0444 represents world-readable. The default is 0444. Configs cannot be writable because they are mounted in a temporary filesystem, so if you set the writable bit, it is ignored. The executable bit can be set. If you aren’t familiar with UNIX file permission modes, you may find this permissions calculator useful.

    # Defines the named secrets that can be used by services. This can be written in short form or long form, exactly as "configs" above. Read more about secrets here: https://docs.docker.com/engine/swarm/secrets/
    # Note: Docker secrets are only available to swarm services, not to standalone containers. To use this feature, consider adapting your container to run as a service. Stateful containers can typically run with a scale of 1 without changing the container code.
    secrets:
      - secrets-file-name

    # used to define what other services in the compose file, this service depends on. Docker-compose will start the serveres in the order listed here.
    depends_on:
      - first-service
      - second-service # These two services will be started before this service. They must be defined in this docker-compose file.

    # if we want our service to use a specific container network, we define the network here(after defining it in the "top level networks key( at the top of this file)")
    networks:
      - first-network

    # specifics custom dns to use inside the container, if needed.
    dns:
      - 8.8.8.8
      - 1.1.1.1

    # Specifies the command to execute when the service starts, if something else than the default command has to be run.
    command: command here

    # environment variables. There can be lots of different variables, and they are often defined by the docker container creator, in the documentation by said creator.
    environment:
      # PUID is the user id that will own the files made by this container. if none is set, then root owns the files.
      - PUID=1000

      # PGID is the group id that will own the files made by this container. if none is set, then root owns the files.
      - PGID=1000

      # this sets the timezone used inside the container.
      - TZ=Europe/Copenhagen

    # Volumes are where we map paths outside the container, to inside the container. they are defined as /outside:/inside.
    volumes:
      # This line maps the path: /path/on/host on the hosting server to the path /path/in/container inside the container.
      - /path/on/host:/path/in/container

    # Sets the restart policy of the container. This can be "no", "on failure", "always", "unless-stopped"
    restart: unless-stopped

    # used to map the port outside the container to the port inside the container. These do not need to be the same. We can map port 8008 to port 80 by typing 8008:80
    ports:
      - 8008:80
